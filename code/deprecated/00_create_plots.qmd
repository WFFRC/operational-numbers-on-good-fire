
Analyze data to get a number on prescribed burns in the Western US & visualize comparisons to low-severity burns
This is the most recent script
Tyler L. McIntosh
CU Boulder CIRES Earth Lab
Last updated: 9/19/24


# Setup

```{r, message = FALSE, warning = FALSE, include = FALSE}

rm(list=ls()) #Ensure empty workspace if running from beginning

if(!requireNamespace("here", quietly = TRUE)) {
  install.packages("here")
}
library(here)

source(here::here("code", "functions.R"))

##################################
###### USER FILLED OUT PARAMETERS ##################################
driveFolder <- "GEE_Exports" #The drive folder you exported data to from GEE
operatingUnits <- "Hectares" #either 'Hectares' or 'Acres'
rasterForVizF <- "gf_data_raster_2010_2020_California.tif" # The name of the visualization raster in GDrive that you want to use for case study pull out
caseStudyID <- "CA3966012280920200817"

# Color scheme
rxCol <- col2hex("darkblue")
gFCol <- "#dc0ab4ff"
totCol <- col2hex("goldenrod2")
gfHsCol <- '#FA6EE2' #"#FA97E7"
boundaryCol <- "gray50"
bgNeutralCol <- "gray95"

#gfcol
"#dc0ab4ff" # original
"#E810C0" #225, 15, 185, 91
"#F516CC"#230, 20, 190, 96

#gfhscol


install_and_load_packages(c(
                      "tidyverse", #Includes ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr, forcats
                      "terra",
                      "sf",
                      "mapview",
                      "here",
                      "future", "future.apply", "furrr", "doFuture", "progressr", #Futureverse!
                      "tictoc", 
                      "mblm", #Median-based linear models (i.e. thiel-sen)
                      "plyr",
                      "gridExtra", #complex graphics
                      "kableExtra", #nice tables
                      "magick", #for kableExtra
                      "googlesheets4", #read in google sheet data
                      "scales", #add commas to ggplot axis
                      "tigris", #US data
                      "tmap", #mapping
                      "webshot2",
                      "webshot",
                      "patchwork",
                      'googledrive',
                      'leaflet',
                      "scales")) #add commas to axis



#Ensure necessary directories are created
# figsDir <- here::here("figs")
# dir_ensure(figsDir)
figsDir <- here::here("figs_no_reburn")
dir_ensure(figsDir)

derivedDatDir <- here::here("data", "derived")
dir_ensure(derivedDatDir)


```



# Read in the data

```{r}

driveFolder <- "GEE_Exports" # The operating google drive folder
epsg <- "EPSG:4326" #use WGS 84 for visualization

#RX & GF summarized by state
rxData <- readr::read_csv(here::here('data', 'derived', "rx_state_summary.csv")) #from b02
#gfData <- readr::read_csv(here::here('data', 'derived', 'gf_data_combined_states_2010_2020.csv')) #from a03
gfData <- readr::read_csv(here::here('data', 'derived', 'gf_data_combined_states_no_reburn_v1_2010_2020.csv'))

# Prepped rx spatial data (b02)
rxSpatial <- sf::st_read(here::here(derivedDatDir, 'nfpors_filtered_ready_for_analysis.gpkg')) |>
  sf::st_transform(sf::st_crs(epsg))

# Prepped gf spatial data (a03)
gfSpatial <- sf::st_read(here::here(derivedDatDir, 'merged_goodfire_final.gpkg')) |>
  sf::st_transform(sf::st_crs(epsg))

```

# Manage units
```{r}

#set unit conversion from m^2
if(operatingUnits == "Hectares") {
  unitConversion <- 0.0001
  unitAbbr <- "ha"
} else if(operatingUnits == "Acres") {
  unitConversion <- 0.000247105
  unitAbbr <- "ac"
}

rxData <- rxData |>
  dplyr::mutate(rxBurnArea = rxBurnArea * unitConversion,
                units = operatingUnits)
gfData <- gfData |>
  dplyr::relocate(yearPriorForest, .after = totalArea) |>
  dplyr::mutate(across(cbiAnyBurned:yearPriorForest, ~ . * unitConversion),
                units = operatingUnits)

gfSpatial <- gfSpatial |>
  dplyr::mutate(across(cbiAnyBurned:yearPriorForest, ~ . * unitConversion),
                units = operatingUnits)

if(operatingUnits == "Hectares") {
  rxSpatial <- rxSpatial |>
    dplyr::mutate(TOTALACCOMPLISHMENT_FINAL = TOTALACCOMPLISHMENT_HA,
                  units = operatingUnits)
} else if(operatingUnits == "Acres") {
  rxSpatial <- rxSpatial |>
    dplyr::mutate(TOTALACCOMPLISHMENT_FINAL = TOTALACCOMPLISHMENT_HA * 2.47105,
                  units = operatingUnits)
}

```




# Merge summary data from both RX and GF datasets
  

```{r}

# Merge datasets
rxDataNew <- rxData |>
  dplyr::group_by(year, NAME) |>
  dplyr::summarise(rxBurn = sum(rxBurnArea)) |>
  dplyr::ungroup()

gfDataNew <- gfData |>
  dplyr::group_by(year, NAME, STUSPS) |>
  dplyr::summarise(lowerGoodFire = sum(lowerGoodFire),
                   highGoodFire = sum(highGoodFire),
                   burnedForest = sum(cbiAnyBurned),
                   yearPriorForest = sum(yearPriorForest)) |>
  dplyr::ungroup()

allData <- gfDataNew |>
  dplyr::left_join(rxDataNew) |>
  tidyr::pivot_longer(cols = c(rxBurn,
                               lowerGoodFire,
                               highGoodFire,
                               burnedForest,
                               yearPriorForest),
                      names_to = "datNm",
                      values_to = "area")|>
  dplyr::mutate(datNmFull = dplyr::case_when(datNm == 'lowerGoodFire' ~ "Lower Severity \nGood Forest Wildfire",
                                             datNm == 'rxBurn' ~ 'Prescribed \nForest Burns',
                                             datNm == 'burnedForest' ~ 'Total Forest Wildfire',
                                             datNm == 'highGoodFire' ~ "High Severity Good Forest Wildfire",
                                             datNm == 'yearPriorForest' ~ 'Total Forest Prior')) |>
  dplyr::mutate(stackGroup = dplyr::case_when(datNm == 'lowerGoodFire' ~ "grp2",
                                             datNm == 'rxBurn' ~ 'grp1',
                                             datNm == 'burnedForest' ~ 'grp3',
                                             datNm == 'highGoodFire' ~ "grp2",
                                             datNm == 'yearPriorForest' ~ 'grp4'))  |>
  dplyr::mutate(stackGroup = factor(stackGroup, levels = c('grp3', 'grp2', 'grp1', 'grp4'))) |>
  dplyr::mutate(datNm = factor(datNm, levels = c("burnedForest", "lowerGoodFire", "highGoodFire", "rxBurn", "yearPriorForest")))



#Summarize to state
stateSummary <- allData |>
  dplyr::group_by(NAME, STUSPS, datNm, datNmFull, stackGroup) |>
  dplyr::summarise(area = sum(area)) |>
  dplyr::ungroup()


#Summarize to year
yearSummary <- allData |>
  dplyr::group_by(year, datNm, datNmFull, stackGroup) |>
  dplyr::summarise(area = sum(area)) |>
  dplyr::ungroup()


#Summarize all
allSummary <- allData |>
  dplyr::group_by(datNm, datNmFull, stackGroup) |>
  dplyr::summarise(area = sum(area)) |>
  dplyr::ungroup()

#Make sure that yearPriorForest is an average, rather than a summation
nYears <- length(unique(gfData$year))
stateSummary <- stateSummary |>
  dplyr::mutate(area = ifelse(datNm == "yearPriorForest", area / nYears, area))
allSummary <- allSummary |>
  dplyr::mutate(area = ifelse(datNm == "yearPriorForest", area / nYears, area))

```

# Create graphics

## Overall Graphic
```{r}

#Set graphic parameters
plotColors <- c(rxCol, gfHsCol, gFCol, totCol)
plotLabels <- c("Prescribed Burns", "High Severity Good Wildfire", "Lower Severity Good Wildfire", "Total Wildfire")


#Overall graphic
textSz <- 5.5
#Needs different parameters since turned sideways
plotColors2 <- c(totCol, gfHsCol, gFCol, rxCol)
plotLabels2 <- c("Lower Severity Good Forest Wildfire", "Higher Severity Good Forest Wildfire", "Prescribed Forest Burns", "Total Forest Wildfire")


overallGraphicData <- allSummary |>
  dplyr::filter(datNm != "yearPriorForest") |>
  dplyr::mutate(datNm = forcats::fct_rev(datNm)) |>
  dplyr::mutate(datNmFull = ifelse(datNm == "lowerGoodFire", "Good Forest Wildfire", datNmFull))

highSevNum <- overallGraphicData |>
  dplyr::filter(datNm == "highGoodFire", ) |>
  dplyr::select('area') |>
  dplyr::pull()
lowerSevNum <- overallGraphicData |>
  dplyr::filter(datNm == "lowerGoodFire", ) |>
  dplyr::select('area') |>
  dplyr::pull()

ggplot2::ggplot(overallGraphicData) +
    ggplot2::geom_bar(data = overallGraphicData |> dplyr::filter(stackGroup == "grp3"),
                    aes(x = stackGroup, y = area, fill = datNm),
                    position = position_stack(),
                    stat = "identity",
                    show.legend = FALSE) + 
    ggplot2::geom_bar(data = overallGraphicData |> dplyr::filter(stackGroup == "grp2"),
                    aes(x = stackGroup, y = area, fill = datNm),
                    position = position_stack(),
                    stat = "identity",
                    show.legend = FALSE) +  
  ggplot2::geom_bar(data = overallGraphicData |> dplyr::filter(stackGroup == "grp1"),
                    aes(x = stackGroup, y = area, fill = datNm),
                    position = position_stack(),
                    stat = "identity",
                    show.legend = FALSE) +
  ggplot2::theme_void() +
  ggplot2::scale_fill_manual(values = plotColors2, labels = plotLabels2) +
  ggplot2::coord_flip() +
  geom_text(data = overallGraphicData |> dplyr::filter(datNm != 'burnedForest' & datNm != 'highGoodFire' & datNm != 'lowerGoodFire'),
            aes(x = stackGroup, y = area,
                #label = glue::glue("{scales::comma(hectares)} ha\n({scales::comma(acres)} acres)")),
                label = glue::glue("{scales::comma(area)} {unitAbbr}")),
            hjust = -0.1, colour = "black", size = textSz) +
  geom_text(data = overallGraphicData |> dplyr::filter(datNm == 'burnedForest'),
            aes(x = stackGroup, y = area,
                #label = glue::glue("{scales::comma(hectares)} ha\n({scales::comma(acres)} acres)")),
                label = glue::glue("{scales::comma(area)} {unitAbbr}")),
            hjust = 1.2, colour = "white", size = textSz) +
  geom_text(data = overallGraphicData |> dplyr::filter(datNm != 'highGoodFire'), aes(x = stackGroup , y = 0, label = datNmFull), hjust = -0.1, colour = "white", size = textSz) #+
  # geom_text(data = overallGraphicData |> dplyr::filter(datNm == 'lowerGoodFire'), aes(x = stackGroup, y = 0, label = paste("Lower Severity: ", scales::comma(lowerSevNum), unitAbbr)), nudge_x = 0.2, hjust = -1.55, colour = "black", size = textSz-2) +
  # geom_text(data = overallGraphicData |> dplyr::filter(datNm == 'highGoodFire'), aes(x = stackGroup, y = 0, label = paste("High Severity: ", scales::comma(highSevNum), unitAbbr)), nudge_x = -0.2, hjust = -1.9, colour = "black", size = textSz-2)

ggplot2::ggsave(filename = here::here(figsDir, glue::glue('overall_new_{unitAbbr}.png')), units = "in", width = 6, height = 2.5, bg = "transparent")

```

## State & Year graphics
```{r}

bar_width <- 0.3


#State graphic
stateGraphicData <- stateSummary |>
  dplyr::filter(datNm != "yearPriorForest") |>
  dplyr::mutate(datNm = factor(datNm, levels = c("burnedForest", "highGoodFire", "lowerGoodFire", "rxBurn", "yearPriorForest")))

stateGraphic <- ggplot2::ggplot(stateGraphicData)  +
  ggplot2::geom_bar(data = stateGraphicData |> dplyr::filter(stackGroup == "grp1"),
                    aes(x = STUSPS, y = area, fill = datNm),
                    position = position_nudge(x = -bar_width),
                    stat = "identity",
                    show.legend = FALSE,
                    width = bar_width) +
  ggplot2::geom_bar(data = stateGraphicData |> dplyr::filter(stackGroup == "grp2"),
                    aes(x = STUSPS, y = area, fill = datNm),
                    position = position_stack(),
                    stat = "identity",
                    show.legend = FALSE,
                    width = bar_width) +  
  ggplot2::geom_bar(data = stateGraphicData |> dplyr::filter(stackGroup == "grp3"),
                    aes(x = STUSPS, y = area, fill = datNm),
                    position = position_nudge(x = bar_width),
                    stat = "identity",
                    show.legend = FALSE,
                    width = bar_width) + 
  scale_fill_manual(values = plotColors, labels = plotLabels) +
  xlab("State") +
  ylab(operatingUnits) +
  labs(title = "Good fire in Western U.S. forests by state") +
  scale_y_continuous(labels=comma,
                     limits = c(0, 2000000)#,
                     # sec.axis = sec_axis(trans = ~ . * 2.47105, #add second axis showing acres
                     #                     name = "Acres",
                     #                     labels = comma)
                     ) +
  theme_light() +
  theme(legend.title = element_blank(),
        text = element_text(size = 15))
stateGraphic
  

#Year graphic
yearGraphicData <- yearSummary |>
  dplyr::filter(datNm != "yearPriorForest") |>
  dplyr::mutate(datNm = factor(datNm, levels = c("burnedForest", "highGoodFire", "lowerGoodFire", "rxBurn", "yearPriorForest"))) |>
  dplyr::mutate(year = as.character(year))

yearGraphic <- ggplot2::ggplot(yearGraphicData)  +
  ggplot2::geom_bar(data = yearGraphicData |> dplyr::filter(stackGroup == "grp1"),
                    aes(x = year, y = area, fill = datNm),
                    position = position_nudge(x = -bar_width),
                    stat = "identity",
                    show.legend = TRUE,
                    width = bar_width) +
  ggplot2::geom_bar(data = yearGraphicData |> dplyr::filter(stackGroup == "grp2"),
                    aes(x = year, y = area, fill = datNm),
                    position = position_stack(),
                    stat = "identity",
                    show.legend = TRUE,
                    width = bar_width) +  
  ggplot2::geom_bar(data = yearGraphicData |> dplyr::filter(stackGroup == "grp3"),
                    aes(x = year, y = area, fill = datNm),
                    position = position_nudge(x = bar_width),
                    stat = "identity",
                    show.legend = TRUE,
                    width = bar_width) + 
  scale_fill_manual(values = plotColors, labels = plotLabels) +
  xlab("Year") +
  ylab(operatingUnits) +
  labs(title = "Good fire in Western U.S. forests by year") +
  scale_y_continuous(labels=comma,
                     limits = c(0, 2000000)#,
                     # sec.axis = sec_axis(trans = ~ . * 2.47105, #add second axis showing acres
                     #                     name = "Acres",
                     #                     labels = comma)
                     ) +
  theme_light() +
  theme(legend.title = element_blank(),
        text = element_text(size = 15),
        legend.position = "bottom",
        #legend.position = c(0.3, 0),) +
        legend.margin = margin(t = 0, r = 30, b = 0, l = -30)) +
  guides(fill = guide_legend(nrow = 2, byrow = TRUE)) 
yearGraphic
  

#Create a combined plot
combinedPlot <- (stateGraphic + ggplot2::labs(title = NULL)) / (yearGraphic + ggplot2::labs(title = NULL))
combinedPlot
ggplot2::ggsave(combinedPlot, filename = here::here(figsDir, glue::glue('combined_fig2_{unitAbbr}.png')), units = "in", width = 6, height = 8)



```

# Create tables

do % based on combo number. +2, -1 column. include total good fire column. remove total forest HA


```{r}

#Create as separate tables and merge
stateTable <- stateSummary |>
  dplyr::select(-stackGroup, -datNmFull, -STUSPS) |>
  tidyr::pivot_wider(names_from = "datNm",
                     values_from = "area") |>
  dplyr::rename(Group = NAME)

yearTable <- yearSummary |>
  dplyr::select(-stackGroup, -datNmFull) |>
  tidyr::pivot_wider(names_from = "datNm",
                     values_from = "area") |>
  dplyr::rename(Group = year)

allTable <- allSummary |>
  dplyr::select(-stackGroup, -datNmFull) |>
  tidyr::pivot_wider(names_from = "datNm",
                     values_from = "area") |>
  dplyr::mutate(Group = "All Years")
  
mergedTable <- rbind(stateTable, yearTable, allTable) |>
  dplyr::mutate(totGoodFire = highGoodFire + lowerGoodFire,
                percGoodOfTot = paste(round(100 * (totGoodFire / burnedForest)), "%", sep = ""),
                percGoodOfForest = paste(round(100 * (totGoodFire / yearPriorForest), 1), "%", sep = "")) |>
  dplyr::select(-yearPriorForest) |>
  dplyr::select(Group, rxBurn, lowerGoodFire, highGoodFire, totGoodFire, burnedForest, percGoodOfTot, percGoodOfForest) |>
  dplyr::mutate(dplyr::across(.cols = rxBurn:burnedForest, round))


#Create nice table
x <- kableExtra::kable(mergedTable,
      caption = "Good fire in the western U.S. by year, state, and overall (2010-2020)",
      format.args = list(big.mark = ","),
      align = rep('l', 8),
      col.names = c("Group",
                    glue::glue("Prescribed burn forest {unitAbbr}"),
                    glue::glue("Lower severity good forest wildfire {unitAbbr}"),
                    glue::glue("High severity good forest wildfire {unitAbbr}"),
                    glue::glue("Total good forest wildfire {unitAbbr}"),
                    glue::glue("Total forest wildfire {unitAbbr}"),
                    "All good forest wildfire as a percentage of total forest wildfire",
                    "All good forest wildfire as a percentage of total forest")) |>
  kableExtra::column_spec(1, width = "1cm") |>
  kableExtra::column_spec(2:8, width = "3cm") |>
  kableExtra::kable_classic(full_width = F, html_font = "Calibri") |>
  row_spec(11, extra_css = "border-bottom: 1px dashed;") |>
  #kableExtra::save_kable(here::here(figsDir, glue::glue('summary_table_new_{unitAbbr}.png')))
  save_kable_workaround(here::here(figsDir, glue::glue('summary_table_new_{unitAbbr}.png')))



```
# Summary Stats
```{r}
nFires <- nrow(gfSpatial)
nRx <- sum(rxData$nEvents)
rxArea <- sum(rxData$rxBurnArea)
highSevNum <- overallGraphicData |>
  dplyr::filter(datNm == "highGoodFire", ) |>
  dplyr::select('area') |>
  dplyr::pull()
lowerSevNum <- overallGraphicData |>
  dplyr::filter(datNm == "lowerGoodFire", ) |>
  dplyr::select('area') |>
  dplyr::pull()
totalWildfireNum <- overallGraphicData |>
  dplyr::filter(datNm == "burnedForest", ) |>
  dplyr::select('area') |>
  dplyr::pull()
lowerGoodOfTot <- lowerSevNum / totalWildfireNum * 100
highGoodOfTot <- highSevNum / totalWildfireNum * 100
allGoodOfTot <- (lowerSevNum + highSevNum) / totalWildfireNum * 100




lowerSevGFRxCompare = ((lowerSevNum / rxArea) - 1) * 100
allSevGFRxCompare = (((lowerSevNum + highSevNum) / rxArea) - 1) * 100

# RX details

rxByFRG <- rxData |>
  dplyr::group_by(FRGDescription) |>
  dplyr::summarise(nEvents = sum(nEvents),
                   rxBurnArea = sum(rxBurnArea)) |>
  dplyr::ungroup()

rxLowSevPerc <- ((rxByFRG |>
                    dplyr::filter(FRGDescription == "frcLowMix") |>
                    dplyr::pull(rxBurnArea)) / 
                  sum(rxByFRG$rxBurnArea)) * 100

rxBroadcastOfLowSev <- (rxSpatial |>
                          dplyr::group_by(FRGDescription, TYPENAME) |>
                          dplyr::summarise(tot_area = sum(TOTALACCOMPLISHMENT_FINAL)) |>
                          dplyr::filter(FRGDescription == "frcLowMix" &
                                          TYPENAME == "Broadcast Burn") |>
                          dplyr::pull(tot_area) / 
                        (rxByFRG |>
                        dplyr::filter(FRGDescription == "frcLowMix") |>
                        dplyr::pull(rxBurnArea))) * 100


```


# Spatial plots

Prep data to display

```{r}

#Use only the GF polygons that contain >10% forest pre-burn & create a combined good fire column
gfSpatialForestOnly <- gfSpatial |>
  dplyr::mutate(percPreFor = (yearPriorForest / totalArea) * 100) |>
  dplyr::filter(percPreFor >= 10) |>
  dplyr::mutate(totalGoodFire = lowerGoodFire + highGoodFire,
                totGoodPercForest = (totalGoodFire / yearPriorForest) * 100)


#Pull in state data as context
usa <- tigris::states(progress_bar = FALSE) |>
  sf::st_transform(sf::st_crs(epsg))
west <- usa[usa$STUSPS %in% c("WA", "OR", "CA", "ID", "MT", "WY", "NV", "AZ", "CO", "NM", "UT"),] 

```

# Create spatial map

```{r spatial-map}



# Create a leaflet map to get accurate (geographically meaningful) size of NFPORS points
# Since leaflet does not export easily for static graphics, the information from this has been visually used


# to adjust the GGPLOT2 final outputs
rxBCol = "transparent"
transparency = 0.75
strk = 0
rngMin = 0.1
rngMax = 7
pch = 21

rxSpatial2 <- rxSpatial |>
  dplyr::mutate(area_m2 = TOTALACCOMPLISHMENT_HA * 10000, # 1 hectare = 10,000 square meters
    radius = sqrt(area_m2 / pi)) %>%
  cbind(sf::st_coordinates(.)) |>
  dplyr::rename(lat = Y, long = X) |>
  dplyr::select(lat, long, TOTALACCOMPLISHMENT_FINAL, radius)

x <- rxSpatial2 |>
  dplyr::filter(TOTALACCOMPLISHMENT_FINAL > 10000) |>
  dplyr::select(TOTALACCOMPLISHMENT_FINAL)
mapview::mapview(x)

m <- leaflet::leaflet() %>%
  leaflet::addPolygons(data = west, fillOpacity = 0.8, fillColor = "white", color = "#444444") %>%
  leaflet::addPolygons(data = gfSpatialForestOnly, fillColor = gFCol, fillOpacity = 0.8, color = NA) %>%
  leaflet::addCircles(data = rxSpatial2, lng = ~long, lat = ~lat, radius = ~radius, fillColor = rxCol, color = rxBCol, opacity = transparency, weight = strk, fillOpacity = transparency)

# Display the map
m
```

```{r}
#Function and call to make figure

create.plots <- function(goodFCol, lowGoodFCol, gfBCol, rxCol, rxBCol, transparency, strk, rngMin, rngMax, pch, bgfill, statecol) {
  
  tm <- Sys.time() |>
    gsub(pattern = " ", replacement = "_") |>
    gsub(pattern = ":", replacement = "") |>
    gsub(pattern = ".", replacement = "", fixed = TRUE)
  
  #Create perims + bubbles plot
  ggplot2::ggplot() +
    ggplot2::geom_sf(data = west, aes(), fill = bgfill, color = statecol) +
    #ggplot2::geom_sf(data = goodFirePerimsForestOnly, aes(fill = goodPercAll), color = NA) +
    ggplot2::geom_sf(data = gfSpatialForestOnly, aes(fill = totGoodPercForest), color = NA) + #use percentage of only burned forest within perimeter
    ggplot2::scale_fill_gradient(low = lowGoodFCol, high = goodFCol, limits = c(0, 100)) +
    ggplot2::geom_sf(data = rxSpatial2, aes(size = TOTALACCOMPLISHMENT_FINAL), fill = rxCol, color = rxBCol, pch = pch, alpha = transparency, stroke = strk) +
    #ggplot2::labs(title = "Good fire & Rx Burns in the Western US (rx on top, perimeters) \n Perimeters filtered to >10% forest before burn", fill = "Percentage of \ngood forest fire \nwithin perimeter")  +
    ggplot2::labs(
      #title = "Good fire & Rx Burns in the Western US (rx on top, perimeters) \n Perimeters filtered to >10% forest before burn",
      fill = "Percentage \nof forest \nwithin \nperimeter \nburned by \ngood fire")  +
    theme_void() +
    theme(plot.background = element_rect(fill = "transparent", color = NA),
          panel.border = element_blank(),
          panel.background = element_rect(fill = "transparent"),
          legend.spacing.y = ggplot2::unit(0.6, 'cm'),
          text = element_text(family = "Arial", size = 12, lineheight = 1.15)) +
    ggplot2::scale_size_continuous(
      labels = scales::label_comma(),
      limits = c(0, max(rxSpatial2$TOTALACCOMPLISHMENT_FINAL)),
      name = paste0("Prescribed \nburn \n", tolower(operatingUnits)),
      range = c(rngMin, rngMax))
  ggplot2::ggsave(filename = here::here(figsDir,
                        glue::glue('westwide_forestPerims_rxBubbles_{tm}_{operatingUnits}.png')),
                  units = "in",
                  width = 7,
                  bg = "transparent")
  
}


# Run function
create.plots(
  goodFCol = gFCol,
  lowGoodFCol = totCol,
  gfBCol = "transparent",
  rxCol = rxCol,
  rxBCol = "transparent",
  transparency = 1,
  strk = 0,
  rngMin = 0.1,
  rngMax = 2.65, #tested until visual comparison of bubbles to that from leaflet is as similar as possible
  pch = 21,
  bgfill = bgNeutralCol,
  statecol = boundaryCol
)



#Get hex ids for future use in associated visualizations
col2hex(totCol)
col2hex(rxCol)
col2hex(bgNeutralCol)
col2hex(boundaryCol)


```


# Create California & pull-out map


```{r}

#load viz data
visRasterLocalPath <- here::here(derivedDatDir, rasterForVizF)
if(!file.exists(visRasterLocalPath)) {
  vizRasterGDrivePath <- paste0("~/", driveFolder, "/", rasterForVizF)
  download_data_from_gdrive(vizRasterGDrivePath, visRasterLocalPath)
}
rasterForViz <- terra::rast(visRasterLocalPath)

# Case study boundaries
caseStudyState <- west[west$STUSPS %in% c("CA"),] |>
  sf::st_transform(terra::crs(rasterForViz))
caseStudyBound <- gfSpatialForestOnly |>
  dplyr::filter(DatasetID == caseStudyID) |>
  sf::st_transform(terra::crs(rasterForViz))

# Case study clips
caseStudyR <- rasterForViz |>
  terra::crop(caseStudyBound, mask = TRUE)
caseStudyStateR <- rasterForViz |>
  terra::extend(caseStudyState, fill = 0) |>
  terra::crop(caseStudyState, mask = TRUE, snap = "out") |>
  terra::aggregate(fact = 10, fun = "modal")



# Create visualizations
#case study fire
caseStudyEventFig <- tmap::tm_shape(caseStudyR, raster.downsample = FALSE) +
  tm_raster(palette = c(bgNeutralCol, gFCol, gfHsCol, totCol)) +
  tmap::tm_shape(caseStudyBound) +
  tmap::tm_borders(col = boundaryCol, lwd = 1) +
  tmap::tm_layout(legend.show = FALSE,
                  inner.margins = c(0.1, 0.02, 0.02, 0.02),
                  frame = FALSE) +
  tmap::tm_scale_bar(width = 0.5,
                     position = c("right", "bottom"),
                     color.dark = boundaryCol,
                     text.size = 1.2)
tmap::tmap_save(caseStudyEventFig,
                here::here(figsDir, "case_study_fig_event.png"))

#case study state
caseStudyStateFig <- tmap::tm_shape(caseStudyStateR, raster.downsample = FALSE) +
  tm_raster(palette = c(bgNeutralCol, gFCol, gfHsCol, totCol)) +
  tmap::tm_shape(caseStudyState) +
  tmap::tm_borders(col = 'gray50', lwd = 2) +
  tmap::tm_shape(caseStudyBound) +
  tmap::tm_borders(col = 'gray50', lwd = 2) +
  tmap::tm_layout(legend.show = FALSE,
                  frame = FALSE)
tmap::tmap_save(caseStudyStateFig,
                here::here(figsDir, "case_study_fig_state.png"))




```



